{"version":3,"sources":["app.js"],"names":["TrotelCoinSimulator","totalSupply","initialRate","inflationLimit","maximumAnnualDistribution","currentRate","dailyQuizzesAnswered","daysElapsed","rewardHistory","totalTokensDistributedPerDay","simulateTwoYears","i","quizzesAnsweredToday","Math","floor","random","push","tokensToDistribute","calculateTokensToDistribute","calculateTotalTokensDistributedPerDay","currentQuizzesCount","annualTokensToDistribute","dailyTokensToDistribute","tokensPerQuiz","tokensDistributed","visualizeTokenRewardsPerUser","xAxisData","chartElement","document","getElementById","chart","echarts","init","setOption","title","text","tooltip","trigger","xAxis","type","boundaryGap","data","name","yAxis","series","areaStyle","visualizeQuizzesAnswered","participantHistory","visualizeTotalTokensDistributed","performSimulation","simulator","Array","from","length","_","j","toString"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["function TrotelCoinSimulator(\n  totalSupply,\n  initialRate,\n  inflationLimit,\n  maximumAnnualDistribution\n) {\n  // Class properties\n  this.totalSupply = totalSupply;\n  this.currentRate = initialRate;\n  this.inflationLimit = inflationLimit;\n  this.maximumAnnualDistribution = maximumAnnualDistribution;\n  this.dailyQuizzesAnswered = [];\n  this.daysElapsed = 0;\n  this.rewardHistory = [];\n  this.totalTokensDistributedPerDay = [];\n\n  // Method to simulate two years of activity\n  // Update the simulateTwoYears method to generate random quizzes answered per day\n  this.simulateTwoYears = function () {\n    for (let i = 0; i < 61; i++) {\n      const quizzesAnsweredToday = Math.floor(Math.random() * 1000) + 1; // Generate a random number between 1 and 1000\n      this.dailyQuizzesAnswered.push(quizzesAnsweredToday);\n\n      const tokensToDistribute =\n        this.calculateTokensToDistribute(quizzesAnsweredToday);\n      this.rewardHistory.push(tokensToDistribute);\n\n      this.daysElapsed++;\n    }\n\n    this.calculateTotalTokensDistributedPerDay();\n  };\n\n  // Method to calculate tokens to distribute based on quizzes answered\n  this.calculateTokensToDistribute = function (currentQuizzesCount) {\n    const annualTokensToDistribute = this.maximumAnnualDistribution;\n    const dailyTokensToDistribute = annualTokensToDistribute / 365;\n\n    const tokensPerQuiz = dailyTokensToDistribute / currentQuizzesCount;\n    return tokensPerQuiz;\n  };\n\n  // Method to calculate the total tokens distributed per day\n  this.calculateTotalTokensDistributedPerDay = function () {\n    for (let i = 0; i < this.daysElapsed; i++) {\n      const tokensDistributed =\n        this.rewardHistory[i] * this.dailyQuizzesAnswered[i];\n      this.totalTokensDistributedPerDay.push(tokensDistributed);\n    }\n  };\n\n  // Method to visualize token rewards per user evolution\n  this.visualizeTokenRewardsPerUser = function (xAxisData, rewardHistory) {\n    const chartElement = document.getElementById(\"tokenRewardsContainer\");\n\n    const chart = echarts.init(chartElement);\n\n    chart.setOption({\n      title: {\n        text: `Token rewards per user`,\n      },\n      tooltip: {\n        trigger: \"axis\",\n      },\n      xAxis: {\n        type: \"category\",\n        boundaryGap: false,\n        data: xAxisData,\n        name: \"Days\",\n      },\n      yAxis: {\n        type: \"value\",\n        name: \"Token rewards per user\",\n      },\n      series: [\n        {\n          type: \"line\",\n          data: rewardHistory,\n          areaStyle: {},\n          name: \"Token rewards per user\",\n        },\n      ],\n    });\n  };\n\n  // Method to visualize quizzes answered evolution\n  this.visualizeQuizzesAnswered = function (xAxisData, participantHistory) {\n    const chartElement = document.getElementById(\"quizzesAnsweredContainer\");\n\n    const chart = echarts.init(chartElement);\n\n    chart.setOption({\n      title: {\n        text: `Quizzes answered evolution`,\n      },\n      tooltip: {\n        trigger: \"axis\",\n      },\n      xAxis: {\n        type: \"category\",\n        boundaryGap: false,\n        data: xAxisData,\n        name: \"Days\",\n      },\n      yAxis: {\n        type: \"value\",\n        name: \"Number of quizzes answered\",\n      },\n      series: [\n        {\n          type: \"line\",\n          data: participantHistory,\n          areaStyle: {},\n          name: \"Number of quizzes answered\",\n        },\n      ],\n    });\n  };\n\n  // Method to visualize total tokens distributed per day evolution\n  this.visualizeTotalTokensDistributed = function (xAxisData) {\n    const chartElement = document.getElementById(\n      \"totalTokensDistributedContainer\"\n    );\n\n    const chart = echarts.init(chartElement);\n\n    chart.setOption({\n      title: {\n        text: `Total tokens distributed per day`,\n      },\n      tooltip: {\n        trigger: \"axis\",\n      },\n      xAxis: {\n        type: \"category\",\n        boundaryGap: false,\n        data: xAxisData,\n        name: \"Days\",\n      },\n      yAxis: {\n        type: \"value\",\n        name: \"Total tokens distributed\",\n      },\n      series: [\n        {\n          type: \"line\",\n          data: this.totalTokensDistributedPerDay,\n          areaStyle: {},\n          name: \"Total Tokens Distributed\",\n        },\n      ],\n    });\n  };\n}\n\nfunction performSimulation() {\n  const totalSupply = 100000000; // Example total supply\n  const initialRate = 1.0; // Example initial rate\n  const inflationLimit = 1.0; // Example inflation limit\n  const maximumAnnualDistribution = 1000000; // 1 million TROTEL tokens per year\n\n  const simulator = new TrotelCoinSimulator(\n    totalSupply,\n    initialRate,\n    inflationLimit,\n    maximumAnnualDistribution\n  );\n\n  simulator.simulateTwoYears();\n\n  const xAxisData = Array.from({ length: simulator.daysElapsed }, (_, j) =>\n    (j + 1).toString()\n  );\n\n  // Display separate charts for each metric\n  simulator.visualizeTokenRewardsPerUser(xAxisData, simulator.rewardHistory);\n  simulator.visualizeQuizzesAnswered(xAxisData, simulator.dailyQuizzesAnswered);\n  simulator.visualizeTotalTokensDistributed(xAxisData);\n}\n\nperformSimulation();\n"]}